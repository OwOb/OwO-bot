✨ 「計算機」 ✨

◆－－－－－◆－－－－－◆－－－－－◆－－－－－◆－－－－－◆

💡 詳細功能如下：

1⃣ **計算** / **運算** / **!calculate** / **!calc**

　➡ 指令功能: 給定算式並計算結果

　➡ 指令格式: !calc [算式]

　➡ 指令範例: 計算 3\*13

　➡ 支援的功能: (包括但不限於)
　　　🔸一般算式的計算 (範例: `(7-2*2)*(28%15)` → `39` )
　　　🔸浮點數的計算 (範例: `0.1+0.2*0.3` → `0.16` )
　　　🔸分數的計算 (範例: `fraction("1/3") + fraction("2/5")` → `11/15` )
　　　🔸複數的計算 (範例: `e^(pi*i)+1` → `1.2246467991474e-16i` (浮點數誤差) )
　　　🔸矩陣的計算 (範例: `[[1, 2], [3, 4]] * [[4, 3], [2, 1]]` → `[[8, 5], [20, 13]]` )
　　　🔸單位的計算 (範例: `1 km to m` → `1000 m`)
　　　🔸物理量的計算 (範例: `1 kg * 1 m/s^2` → `1 N` (F = ma) )
　　　🔸指對數 (範例: `log(e^10)` → `10` )
　　　🔸三角函數 (範例: `sin(pi/2)` → `1` )
　　　🔸微分 (範例: `derivative("sin(2x)", "x")` → `2 * cos(2 * x)` )
　　　🔸積分 (範例: `integral("sin(2x)", "x")` → `cos(2 * x) * -1 / 2` )
　　　🔸變數與函數 (範例: `a=4; b=2; f(x,y)=x^y; f(a+b,a-b)` → `[36]` )
　　　　　(每個語句用__**分號**__(`;`)做分隔但最後__**不需要**__)

　➡ 詳細事項:
　　　🔸若「算式」正確無誤, 將會給出計算後的結果
　　　🔸判斷計算的正確性與計算的結果以__**math.js**__為主
　　　🔸__函數遞迴過深__或__函數給值不當__, 都有可能會判斷成「算式」格式有誤
　　　🔸「算式」可能會因為 Discord 本身__標記功能__而呈現奇怪的樣式, 但__**並不會**__影響到指令的判讀
　　　　　(相對來說使用`\`來消除__標記功能__反而會使指令判讀錯誤)
　　　🔸浮點數的__有效位數__只有14位, 計算的結果也有可能受到__浮點數誤差__影響而有些微誤差
　　　🔸支援的功能不限於上面所列舉, 想取得完整的功能和內建函式可以參考__**math.js**__的官網

◆－－－－－◆－－－－－◆－－－－－◆－－－－－◆－－－－－◆